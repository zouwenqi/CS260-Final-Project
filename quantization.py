# -*- coding: utf-8 -*-
"""Quantization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lhScsHIftYZRzoH2kcN3J6l85Zy31-PT
"""

pip install vit_pytorch

import torchvision
import torchvision.transforms as transforms
import torch

batch_size = 256

mnist_train_data = torchvision.datasets.MNIST('./data', train=True, download=True, transform=transforms.ToTensor())
mnist_test_data = torchvision.datasets.MNIST('./data', train=False, download=True, transform=transforms.ToTensor())

mnist_train_dl = torch.utils.data.DataLoader(mnist_train_data, batch_size=batch_size, shuffle=True)
mnist_test_dl = torch.utils.data.DataLoader(mnist_test_data, batch_size=batch_size)

mean = torch.tensor([0.4914, 0.4822, 0.4465])
std = torch.tensor([0.2009, 0.2009, 0.2009])
transform = transforms.Compose([
    transforms.ToTensor(), 
    transforms.Normalize(mean = mean, std = std)])
cifar_train_data = torchvision.datasets.CIFAR10('./data', train=True, download=True, transform=transform)
cifar_test_data = torchvision.datasets.CIFAR10('./data', train=False, download=True, transform=transform)

cifar_train_dl = torch.utils.data.DataLoader(cifar_train_data, batch_size=batch_size, shuffle=True)
cifar_test_dl = torch.utils.data.DataLoader(cifar_test_data, batch_size=batch_size)

import torch
from torch import nn

from einops import rearrange, repeat
from einops.layers.torch import Rearrange

# helpers

def pair(t):
    return t if isinstance(t, tuple) else (t, t)

# classes

class PreNorm(nn.Module):
    def __init__(self, dim, fn):
        super().__init__()
        self.norm = nn.LayerNorm(dim)
        self.fn = fn
    def forward(self, x, **kwargs):
        return self.fn(self.norm(x), **kwargs)

class FeedForward(nn.Module):
    def __init__(self, dim, hidden_dim, dropout = 0.):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(dim, hidden_dim),
            nn.GELU(),
            nn.Dropout(dropout),
            nn.Linear(hidden_dim, dim),
            nn.Dropout(dropout)
        )
    def forward(self, x):
        return self.net(x)

class Attention(nn.Module):
    def __init__(self, dim, heads = 8, dim_head = 64, dropout = 0.):
        super().__init__()
        inner_dim = dim_head *  heads
        project_out = not (heads == 1 and dim_head == dim)

        self.heads = heads
        self.scale = dim_head ** -0.5

        self.attend = nn.Softmax(dim = -1)
        self.to_qkv = nn.Linear(dim, inner_dim * 3, bias = False)

        self.to_out = nn.Sequential(
            nn.Linear(inner_dim, dim),
            nn.Dropout(dropout)
        ) if project_out else nn.Identity()

    def forward(self, x):
        qkv = self.to_qkv(x).chunk(3, dim = -1)
        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h = self.heads), qkv)

        dots = torch.matmul(q, k.transpose(-1, -2)) * self.scale

        attn = self.attend(dots)

        out = torch.matmul(attn, v)
        out = rearrange(out, 'b h n d -> b n (h d)')
        return self.to_out(out)

class Transformer(nn.Module):
    def __init__(self, dim, depth, heads, dim_head, mlp_dim, dropout = 0.):
        super().__init__()
        self.layers = nn.ModuleList([])
        self.attn = PreNorm(dim, Attention(dim, heads = heads, dim_head = dim_head, dropout = dropout))
        self.ff = PreNorm(dim, FeedForward(dim, mlp_dim, dropout = dropout))
        for _ in range(depth):
            self.layers.append(nn.ModuleList([
                PreNorm(dim, Attention(dim, heads = heads, dim_head = dim_head, dropout = dropout)),
                PreNorm(dim, FeedForward(dim, mlp_dim, dropout = dropout))
            ]))
    def forward(self, x):
        for attn, ff in self.layers:
          x = self.attn(x) + x
          x = self.ff(x) + x
        return x

class ViT1(nn.Module):
    def __init__(self, *, image_size, patch_size, num_classes, dim, depth, heads, mlp_dim, pool = 'cls', channels = 3, dim_head = 64, dropout = 0., emb_dropout = 0.):
        super().__init__()
        image_height, image_width = pair(image_size)
        patch_height, patch_width = pair(patch_size)

        assert image_height % patch_height == 0 and image_width % patch_width == 0, 'Image dimensions must be divisible by the patch size.'

        num_patches = (image_height // patch_height) * (image_width // patch_width)
        patch_dim = channels * patch_height * patch_width
        assert pool in {'cls', 'mean'}, 'pool type must be either cls (cls token) or mean (mean pooling)'

        self.to_patch_embedding = nn.Sequential(
            Rearrange('b c (h p1) (w p2) -> b (h w) (p1 p2 c)', p1 = patch_height, p2 = patch_width),
            nn.Linear(patch_dim, dim),
        )

        # self.quant = torch.quantization.QuantStub()
        # self.dequant = torch.quantization.DeQuantStub()
        self.pos_embedding = nn.Parameter(torch.randn(1, num_patches + 1, dim))
        self.cls_token = nn.Parameter(torch.randn(1, 1, dim))
        self.dropout = nn.Dropout(emb_dropout)

        self.transformer = Transformer(dim, depth, heads, dim_head, mlp_dim, dropout)

        self.pool = pool
        self.to_latent = nn.Identity()

        self.mlp_head = nn.Sequential(
            nn.LayerNorm(dim),
            nn.Linear(dim, num_classes)
        )

    def forward(self, img):
        x = self.to_patch_embedding(img)
        b, n, _ = x.shape

        cls_tokens = repeat(self.cls_token, '() n d -> b n d', b = b)
        x = torch.cat((cls_tokens, x), dim=1)
        x += self.pos_embedding[:, :(n + 1)]
        # x = self.quant(x)
        x = self.dropout(x)

        x = self.transformer(x)
        # x = self.dequant(x)

        x = x.mean(dim = 1) if self.pool == 'mean' else x[:, 0]

        x = self.to_latent(x)
        return self.mlp_head(x)

def test(model, test_dl):
  """ TODO: Compute the accuracy on test set. You may reuse your code from HW1. """
  accuracy = None
  right_count = 0
  total_count = 0
  for (X, y) in test_dl:
    prediction = torch.argmax(model(X), dim=1).cpu()
    num_elements = y.size(dim=0)
    total_count = total_count + num_elements
    right_count_this_batch = 0
    for x in range(0, num_elements):
      if y[x] == prediction[x]:
        right_count = right_count + 1

  return right_count/total_count

def train(model, lr, momentum, num_epochs, train_dl, test_dl):
  """ TODO: Defining an optimizer. """
  opt = torch.optim.Adam(model.parameters(), lr=lr)
  ce_loss = torch.nn.CrossEntropyLoss()
  train_dl = train_dl
  test_dl = test_dl

  for epoch in range(1, num_epochs + 1):
    """ TODO: Do training on the training set. You may reuse your code from HW1."""
    for X, y in train_dl:
      prediction = model(X)
      loss = ce_loss(prediction, y)
      opt.zero_grad()
      loss.backward()
      opt.step()

    test_accuracy = test(model, test_dl)
    print(f"Test accuracy at epoch {epoch}: {test_accuracy:.4f}")

from torchvision.transforms.functional_pil import vflip
""" TODO: Set hyperparameters """
import torch
import os
# from vit_pytorch import ViT
from datetime import datetime

def print_model_size(model):    
  torch.save(model.state_dict(), "tmp.pt")    
  print("%.2f MB" %(os.path.getsize("tmp.pt")/1e6))    
  os.remove('tmp.pt')

def num_param(model):    
  mm = sum([param.nelement() for param in model.parameters()])    
  return (mm)


now = datetime.now()

current_time = now.strftime("%H:%M:%S")
print("Current Time =", current_time)

v = ViT1(
    image_size = 256,
    patch_size = 32,
    num_classes = 10,
    dim = 256,
    depth = 2,
    heads = 4,
    mlp_dim = 256,
    dropout = 0.1,
    emb_dropout = 0.1
)

# v = v.eval()

# v.config = torch.quantization.get_default_qconfig('fbgemm')
# torch.quantization.prepare(v, inplace=True)
# torch.quantization.convert(v, inplace=True)

v.transformer = torch.quantization.quantize_dynamic(
    v.transformer,  # the original model
    {torch.nn.Dropout, torch.nn.Linear},  # a set of layers to dynamically quantize
    dtype=torch.qint8)

print_model_size(v)
print(num_param(v))

lr = 0.001
momentum = 0.9
num_epochs = 35

""" TODO: Implement your CNN model definitions for CIFAR-10"""
model_cifar = v

train(model_cifar, lr, momentum, num_epochs, cifar_train_dl, cifar_test_dl)
test_accuracy = test(model_cifar, cifar_test_dl)
print(f"Final test accuracy on CIFAR-10: {test_accuracy:.4f}")

now = datetime.now()

current_time = now.strftime("%H:%M:%S")
print("Current Time =", current_time)